{
  "version": 3,
  "sources": ["../src/internal/GetGlobal.ts", "../src/internal/GetL10n.ts", "../src/internal/GetPhrase.ts", "../src/internal/ReplaceKeywords.ts", "../src/_s.ts", "../src/L10n.ts"],
  "sourcesContent": ["export function getGlobal(): any {\r\n  var target: any = null;\r\n  if (typeof window !== \"undefined\") {\r\n    target = window;\r\n  } else if (typeof global !== \"undefined\") {\r\n    target = global;\r\n  }\r\n\r\n  return target;\r\n}\r\n", "import { getGlobal } from \"./GetGlobal\";\r\n\r\ntype GlobalL10n = {\r\n  Phrases: {\r\n    [phrase: string]: {\r\n      r: {\r\n        \"0\": string;\r\n        [ruleIndex: string]: string | undefined;\r\n      };\r\n    };\r\n  };\r\n  ruleEvaluator: (count: number) => number;\r\n};\r\n\r\nexport function getL10n(): GlobalL10n | null {\r\n  var global = getGlobal();\r\n  if (global == null) {\r\n    return null;\r\n  }\r\n\r\n  var l10n = global.l10n;\r\n  if (\"undefined\" === typeof l10n) {\r\n    return null;\r\n  }\r\n\r\n  return l10n as GlobalL10n;\r\n}\r\n", "import { getL10n } from \"./GetL10n\";\r\n\r\n/**\r\n * Fetches the phrase from the internal list of phrases, and evaluates potential count-rules\r\n */\r\nexport function getPhrase(\r\n  phrase: string,\r\n  args?: {\r\n    __count?: number;\r\n  }\r\n) {\r\n  if (\"undefined\" === typeof args) args = {};\r\n  var l10n = getL10n();\r\n  if (l10n == null) {\r\n    return phrase;\r\n  }\r\n\r\n  var _p = l10n.Phrases[phrase];\r\n  var _ri: string | undefined;\r\n  if (\"undefined\" !== typeof args.__count) {\r\n    _ri = l10n.ruleEvaluator(args.__count).toString();\r\n  }\r\n  if (\"undefined\" !== typeof _p) {\r\n    if (\"undefined\" !== typeof _ri && \"undefined\" !== typeof _p.r[_ri]) {\r\n      phrase = _p.r[_ri]!;\r\n    } else {\r\n      phrase = _p.r[\"0\"];\r\n    }\r\n  }\r\n  return phrase;\r\n}\r\n", "export function replaceKeywords(\r\n  phrase: string,\r\n  args?: {\r\n    [key: string]: string | number;\r\n  }\r\n) {\r\n  if (\"undefined\" === typeof args) {\r\n    return phrase;\r\n  }\r\n\r\n  for (var p in args) {\r\n    if (args.hasOwnProperty(p)) {\r\n      phrase = phrase.split(\"$\" + p + \"$\").join(args[p]?.toString() ?? \"\");\r\n    }\r\n  }\r\n  return phrase;\r\n}\r\n", "import { getPhrase } from \"./internal/GetPhrase\";\r\nimport { replaceKeywords } from \"./internal/ReplaceKeywords\";\r\nimport { ExtractL10nParameter } from \"./publicTypes\";\r\n\r\nexport function _s<T extends string>(\r\n  l10nString: T,\r\n  formatParameters?: {\r\n    [key in ExtractL10nParameter<T>]: string | number;\r\n  }\r\n): string {\r\n  return replaceKeywords(\r\n    getPhrase(l10nString, formatParameters),\r\n    formatParameters\r\n  );\r\n}\r\n", "import { _s } from \"./_s\";\r\n\r\nif (\"undefined\" !== typeof window) {\r\n  (window as any)._s = _s;\r\n}\r\n\r\nif (\"undefined\" !== typeof global) {\r\n  (global as any)._s = _s;\r\n}\r\n"],
  "mappings": "YAAO,YAA0B,CAC/B,GAAI,GAAc,KAClB,MAAI,OAAO,SAAW,YACpB,EAAS,OACA,MAAO,SAAW,aAC3B,GAAS,QAGJ,ECMF,YAAsC,CAC3C,GAAI,GAAS,IACb,GAAI,GAAU,KACZ,MAAO,MAGT,GAAI,GAAO,EAAO,KAClB,MAAI,AAAgB,OAAO,IAAvB,YACK,KAGF,ECpBF,WACL,EACA,EAGA,CACA,AAAI,AAAgB,MAAO,IAAvB,aAA6B,GAAO,IACxC,GAAI,GAAO,IACX,GAAI,GAAQ,KACV,MAAO,GAGT,GAAI,GAAK,EAAK,QAAQ,GAClB,EACJ,MAAI,AAAgB,OAAO,GAAK,SAA5B,aACF,GAAM,EAAK,cAAc,EAAK,SAAS,YAErC,AAAgB,MAAO,IAAvB,aACF,CAAI,AAAgB,MAAO,IAAvB,aAA8B,AAAgB,MAAO,GAAG,EAAE,IAA5B,YAChC,EAAS,EAAG,EAAE,GAEd,EAAS,EAAG,EAAE,MAGX,EC7BF,WACL,EACA,EAGA,CALF,QAME,GAAI,AAAgB,MAAO,IAAvB,YACF,MAAO,GAGT,OAAS,KAAK,GACZ,AAAI,EAAK,eAAe,IACtB,GAAS,EAAO,MAAM,IAAM,EAAI,KAAK,KAAK,QAAK,KAAL,cAAS,aAAT,OAAuB,KAGrE,MAAO,GCXF,WACL,EACA,EAGQ,CACR,MAAO,GACL,EAAU,EAAY,GACtB,GCVJ,AAAI,AAAgB,MAAO,SAAvB,aACD,QAAe,GAAK,GAGvB,AAAI,AAAgB,MAAO,SAAvB,aACD,QAAe,GAAK",
  "names": []
}

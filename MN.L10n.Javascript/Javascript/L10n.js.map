{
  "version": 3,
  "sources": ["../src/internal/GetGlobal.ts", "../src/internal/GetL10n.ts", "../src/internal/MetadataReplacer.ts", "../src/internal/GetPhrase.ts", "../src/internal/ReplaceKeywords.ts", "../src/_s.ts", "../src/L10n.ts"],
  "sourcesContent": ["export function getGlobal(): any {\r\n  var target: any = null;\r\n  if (typeof window !== \"undefined\") {\r\n    target = window;\r\n  } else if (typeof global !== \"undefined\") {\r\n    target = global;\r\n  }\r\n\r\n  return target;\r\n}\r\n", "import { getGlobal } from \"./GetGlobal\";\r\n\r\ntype GlobalL10n = {\r\n  Phrases: {\r\n    [phrase: string]: {\r\n      r: {\r\n        \"0\": string;\r\n        [ruleIndex: string]: string | undefined;\r\n      };\r\n    };\r\n  };\r\n  ruleEvaluator: (count: number) => number;\r\n};\r\n\r\nexport function getL10n(): GlobalL10n | null {\r\n  var global = getGlobal();\r\n  if (global == null) {\r\n    return null;\r\n  }\r\n\r\n  var l10n = global.l10n;\r\n  if (\"undefined\" === typeof l10n) {\r\n    return null;\r\n  }\r\n\r\n  return l10n as GlobalL10n;\r\n}\r\n", "var metaDataStartToken = \" !ctx=\";\r\n\r\nexport function replaceMetadata(phrase: string | null): string {\r\n\tif (phrase == null) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tif (typeof phrase != \"string\") {\r\n\t\treturn phrase;\r\n\t}\r\n\r\n\tvar ioMetaStart = phrase.toLowerCase().indexOf(metaDataStartToken);\r\n\tif (ioMetaStart < 0) {\r\n\t\treturn phrase;\r\n\t}\r\n\r\n\treturn phrase.substring(0, ioMetaStart);\r\n}\r\n", "import { getL10n } from \"./GetL10n\";\r\nimport { replaceMetadata } from \"./MetadataReplacer\";\r\n\r\n/**\r\n * Fetches the phrase from the internal list of phrases, and evaluates potential count-rules\r\n */\r\nexport function getPhrase(\r\n\tphrase: string,\r\n\targs?: {\r\n\t\t__count?: number;\r\n\t}\r\n) {\r\n\tif (\"undefined\" === typeof args) args = {};\r\n\tvar l10n = getL10n();\r\n\tif (l10n == null) {\r\n\t\treturn phrase;\r\n\t}\r\n\r\n\tvar _p = l10n.Phrases[phrase];\r\n\tvar _ri: string | undefined;\r\n\tif (\"undefined\" !== typeof args.__count) {\r\n\t\t_ri = l10n.ruleEvaluator(args.__count).toString();\r\n\t}\r\n\tif (\"undefined\" !== typeof _p) {\r\n\t\tif (\"undefined\" !== typeof _ri && \"undefined\" !== typeof _p.r[_ri]) {\r\n\t\t\tphrase = _p.r[_ri]!;\r\n\t\t} else {\r\n\t\t\tphrase = _p.r[\"0\"];\r\n\t\t}\r\n\t}\r\n\r\n\treturn replaceMetadata(phrase);\r\n}\r\n", "export function replaceKeywords(\r\n  phrase: string,\r\n  args?: {\r\n    [key: string]: string | number;\r\n  }\r\n) {\r\n  if (\"undefined\" === typeof args) {\r\n    return phrase;\r\n  }\r\n\r\n  for (var p in args) {\r\n    if (args.hasOwnProperty(p)) {\r\n      phrase = phrase.split(\"$\" + p + \"$\").join(args[p]?.toString() ?? \"\");\r\n    }\r\n  }\r\n  return phrase;\r\n}\r\n", "import { getPhrase } from \"./internal/GetPhrase\";\r\nimport { replaceKeywords } from \"./internal/ReplaceKeywords\";\r\nimport { ExtractL10nParameter, TranslatedString } from \"./publicTypes\";\r\n\r\nexport function _s<T extends string>(\r\n  l10nString: T,\r\n  formatParameters?: {\r\n    [key in ExtractL10nParameter<T>]: string | number;\r\n  }\r\n): TranslatedString {\r\n  return replaceKeywords(\r\n    getPhrase(l10nString, formatParameters),\r\n    formatParameters\r\n  ) as unknown as TranslatedString;\r\n}\r\n", "import { _s } from \"./_s\";\r\n\r\nif (\"undefined\" !== typeof window) {\r\n  (window as any)._s = _s;\r\n}\r\n\r\nif (\"undefined\" !== typeof global) {\r\n  (global as any)._s = _s;\r\n}\r\n"],
  "mappings": "yBAAO,SAASA,GAAiB,CAC/B,IAAIC,EAAc,KAClB,OAAI,OAAO,QAAW,YACpBA,EAAS,OACA,OAAO,QAAW,cAC3BA,EAAS,QAGJA,CACT,CCKO,SAASC,GAA6B,CAC3C,IAAIC,EAASC,EAAU,EACvB,GAAID,GAAU,KACZ,OAAO,KAGT,IAAIE,EAAOF,EAAO,KAClB,OAAoB,OAAOE,GAAvB,YACK,KAGFA,CACT,CC1BA,IAAIC,EAAqB,SAElB,SAASC,EAAgBC,EAA+B,CAC9D,GAAIA,GAAU,KACb,MAAO,GAGR,GAAI,OAAOA,GAAU,SACpB,OAAOA,EAGR,IAAIC,EAAcD,EAAO,YAAY,EAAE,QAAQF,CAAkB,EACjE,OAAIG,EAAc,EACVD,EAGDA,EAAO,UAAU,EAAGC,CAAW,CACvC,CCXO,SAASC,EACfC,EACAC,EAGC,CACmB,OAAOA,GAAvB,cAA6BA,EAAO,CAAC,GACzC,IAAIC,EAAOC,EAAQ,EACnB,GAAID,GAAQ,KACX,OAAOF,EAGR,IAAII,EAAKF,EAAK,QAAQF,GAClBK,EACJ,OAAoB,OAAOJ,EAAK,SAA5B,cACHI,EAAMH,EAAK,cAAcD,EAAK,OAAO,EAAE,SAAS,GAE7B,OAAOG,GAAvB,cACiB,OAAOC,GAAvB,aAA8C,OAAOD,EAAG,EAAEC,IAA5B,YACjCL,EAASI,EAAG,EAAEC,GAEdL,EAASI,EAAG,EAAE,IAITE,EAAgBN,CAAM,CAC9B,CChCO,SAASO,EACdC,EACAC,EAGA,CALF,IAAAC,EAAAC,EAME,GAAoB,OAAOF,GAAvB,YACF,OAAOD,EAGT,QAASI,KAAKH,EACRA,EAAK,eAAeG,CAAC,IACvBJ,EAASA,EAAO,MAAM,IAAMI,EAAI,GAAG,EAAE,MAAKD,GAAAD,EAAAD,EAAKG,KAAL,YAAAF,EAAS,aAAT,KAAAC,EAAuB,EAAE,GAGvE,OAAOH,CACT,CCZO,SAASK,EACdC,EACAC,EAGkB,CAClB,OAAOC,EACLC,EAAUH,EAAYC,CAAgB,EACtCA,CACF,CACF,CCZoB,OAAO,QAAvB,cACD,OAAe,GAAKG,GAGH,OAAO,QAAvB,cACD,OAAe,GAAKA",
  "names": ["getGlobal", "target", "getL10n", "global", "getGlobal", "l10n", "metaDataStartToken", "replaceMetadata", "phrase", "ioMetaStart", "getPhrase", "phrase", "args", "l10n", "getL10n", "_p", "_ri", "replaceMetadata", "replaceKeywords", "phrase", "args", "_a", "_b", "p", "_s", "l10nString", "formatParameters", "replaceKeywords", "getPhrase", "_s"]
}
